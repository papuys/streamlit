# -*- coding: utf-8 -*-
"""Project Analisis Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ug4Ox4qIFDSo1koFA0XiNJE-ce12rECy

# Dashboard Analisis Data
- **Nama:** [Ulfah humairah]
- **Email:** [ulfahhumairah03@gmail.com]
- **ID Dicoding:** [m211b4kx4372]

## Menentukan Pertanyaan Bisnis

1. Musim apa yang memiliki jumlah penggunaan sepeda tertinggi?
2. Bagaimana penyewaan sepeda dipengaruhi oleh suhu? Apakah pengguna lebih sering menyewa sepeda saat suhu hangat atau dingin?

## Import Semua Packages/Library yang Digunakan
"""

"""## Data Wrangling

### Gathering Data
"""
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os

base_path = os.path.dirname(os.path.dirname(__file__))  # Ambil folder induk dari 'dashboard'
day_file_path = os.path.join(base_path, 'data', 'day.csv')
day_df = pd.read_csv(day_file_path)
day_df.head(5)

hour_file_path = os.path.join(base_path, 'data', 'hour.csv')
hour_df = pd.read_csv(hour_file_path)
hour_df.head()

day_df = pd.read_csv(day_file_path)
hour_df = pd.read_csv(hour_file_path)

main_data = pd.merge(
    left=day_df,
    right=hour_df,
    how="inner",
    on="instant"
)

print(main_data)


main_data.to_csv("main_data.csv", index=False)


### Assessing Data
"""

main_data.info()

day_df.isnull().sum()

hour_df.isnull().sum()

data_duplicated_hour = hour_df.duplicated().sum()
data_duplicated_day = day_df.duplicated().sum()

print("Jumlah data Duplikat dari Data Day CSV sebanyak : ", data_duplicated_day)
print("Jumlah data Duplikat dari Data Hour CSV sebanyak : ", data_duplicated_hour)

day_df.describe()

hour_df.describe()

### Cleaning Data
"""

# Mengubah kolom 'dteday' pada day_df
day_df['dteday'] = pd.to_datetime(day_df['dteday'])

# Mengubah kolom 'dteday' pada hour_df
hour_df['dteday'] = pd.to_datetime(hour_df['dteday'])

# Menampilkan informasi tipe data setelah perubahan
print("Tipe data pada day_df setelah perubahan:")
print(day_df.info())

print("\nTipe data pada hour_df setelah perubahan:")
print(hour_df.info())

# Mengubah angka season menjadi nama musim yang lebih mudah dimengerti
season_mapping = {1: 'Spring', 2: 'Summer', 3: 'Fall', 4: 'Winter'}
day_df['season_name'] = day_df['season'].map(season_mapping)
day_df.head()

day_df['temp'] = day_df['temp'] * 41
day_df['atemp'] = day_df['atemp'] * 50
day_df['hum'] = day_df['hum'] * 100
day_df['windspeed'] = day_df['windspeed'] * 67

# Menampilkan 5 baris pertama untuk memeriksa perubahan
day_df.head()

day_df.to_csv("clean_day_bike_data.csv", index=False)

## Exploratory Data Analysis (EDA)

### Explore ...
"""

day_df.describe(include="all")

# Mapping season to readable names
season_mapping = {1: 'Spring', 2: 'Summer', 3: 'Fall', 4: 'Winter'}
day_df['season_name'] = day_df['season'].map(season_mapping)

# Average rentals per season
season_avg_df = day_df.groupby('season_name')['cnt'].sum().reset_index()
season_avg_df.columns = ['Musim', 'Total Penggunaan Sepeda']
season_avg_df

# Categorizing temperature into 5 bins
day_df['temp_bin'], bins = pd.cut(day_df['temp'], bins=5, labels=['Sangat Dingin', 'Dingin', 'Sedang', 'Hangat', 'Panas'], retbins=True)

# Average rentals per temperature category
temp_avg_df = day_df.groupby('temp_bin')['cnt'].sum().reset_index()
temp_avg_df.columns = ['Kategori Suhu', 'Total Penyewaan Sepeda']
temp_avg_df

# Data split by working day and holiday
working_day_df = hour_df[hour_df['workingday'] == 1]
holiday_df = hour_df[hour_df['workingday'] == 0]

# Average rentals per hour for working day and holiday
working_day_hourly_avg_df = working_day_df.groupby('hr')['cnt'].sum().reset_index()
holiday_hourly_avg_df = holiday_df.groupby('hr')['cnt'].sum().reset_index()

# Rename columns for clarity
working_day_hourly_avg_df.columns = ['Jam', 'Total Penyewaan (Hari Kerja)']
holiday_hourly_avg_df.columns = ['Jam', 'Total Penyewaan (Hari Libur)']

# Merge the two dataframes for comparison
hourly_comparison_df = pd.merge(working_day_hourly_avg_df, holiday_hourly_avg_df, on='Jam')
hourly_comparison_df

## Visualization & Explanatory Analysis

### Pertanyaan 1: 1. Musim apa yang memiliki rata-rata penggunaan sepeda tertinggi?
"""

# Menghitung rata-rata penyewaan sepeda per musim
season_avg = day_df.groupby('season_name')['cnt'].mean()

# Visualisasi
import matplotlib.pyplot as plt
season_avg.plot(kind='bar', title='Rata-rata Penggunaan Sepeda per Musim')
plt.xlabel('Musim')
plt.ylabel('Rata-rata Penyewaan Sepeda (cnt)')
plt.show()

"""### Pertanyaan 2:Bagaimana penyewaan sepeda dipengaruhi oleh suhu? Apakah pengguna lebih sering menyewa sepeda saat suhu hangat atau dingin?"""

# Membagi kolom suhu (temp) ke dalam 5 kategori menggunakan pd.cut
day_df['temp_bin'], bins = pd.cut(day_df['temp'],
                                   bins=5,
                                   labels=['Sangat Dingin', 'Dingin', 'Sedang', 'Hangat', 'Panas'],
                                   retbins=True)

# Menghitung rata-rata penyewaan sepeda per kategori suhu
temp_avg = day_df.groupby('temp_bin')['cnt'].mean()

# Siapkan data untuk visualisasi
categories = day_df['temp_bin'].cat.categories
temp_ranges = [f"{bins[i]:.2f} - {bins[i+1]:.2f}" for i in range(len(bins)-1)]
average_counts = temp_avg.values

# Membuat visualisasi
plt.figure(figsize=(10, 6))

# Bar chart untuk rata-rata penyewaan sepeda
bars = plt.bar(categories, average_counts, color='skyblue', alpha=0.7, edgecolor='black')

# Menambahkan garis horizontal untuk menunjukkan kisaran suhu
for i, bar in enumerate(bars):
    y = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, y + 1, temp_ranges[i], ha='center', color='black')

# Mengatur label dan judul
plt.xlabel('Kategori Suhu', fontsize=12)
plt.ylabel('Rata-rata Penyewaan Sepeda (cnt)', fontsize=12)
plt.title('Rata-rata Penyewaan Sepeda Berdasarkan Kategori Suhu dan Kisaran Suhu', fontsize=16)

# Menampilkan grid
plt.grid(axis='y')

# Menampilkan grafik
plt.show()

## Analisis Lanjutan (Opsional)
Bagaimana perbandingan penggunaan sepeda antara hari kerja dan hari libur?
"""

# Menghitung rata-rata penyewaan sepeda berdasarkan status hari kerja dan libur
average_rentals = day_df.groupby('workingday')['cnt'].mean()

# Visualisasi
average_rentals.plot(kind='bar', title='Rata-rata Penyewaan Sepeda: Hari Kerja vs Libur')
plt.xticks(ticks=[0, 1], labels=['Libur', 'Hari Kerja'], rotation=0)
plt.xlabel('Status Hari')
plt.ylabel('Rata-rata Penyewaan Sepeda (cnt)')
plt.show()

"""## Conclusion

1. Musim apa yang memiliki jumlah penggunaan sepeda tertinggi?
*   Tujuan: Menganalisis pengaruh musim terhadap penggunaan sepeda untuk membantu perumusan strategi jangka panjang.
*   Kesimpulan: Musim Fall (gugur) mencatat penggunaan tertinggi, diikuti oleh Summer (panas). Musim dingin dan semi memiliki penyewaan lebih rendah.


---



2. Bagaimana penyewaan sepeda dipengaruhi oleh suhu? Apakah pengguna lebih sering menyewa sepeda saat suhu hangat atau dingin?



*   Tujuan: Memahami apakah pengguna lebih cenderung menyewa sepeda saat suhu hangat atau dingin untuk membantu dalam perencanaan strategi pemasaran dan pengelolaan armada.
*   Kesimpulan: Penyewaan tertinggi terjadi pada suhu hangat dan panas, sementara penyewaan sangat rendah saat suhu sangat dingin.

---



3. Bagaimana perbandingan penggunaan sepeda antara hari kerja dan hari libur?



*   Tujuan: Mengidentifikasi perbedaan pola penggunaan sepeda pada hari kerja dan hari libur untuk membantu dalam perencanaan layanan dan promosi.
*   Kesimpulan: Hari kerja memiliki penyewaan lebih tinggi dibandingkan hari libur, menunjukkan sepeda lebih banyak digunakan sebagai transportasi sehari-hari



---
"""
